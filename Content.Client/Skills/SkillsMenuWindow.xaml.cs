using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Content.Shared.Skills;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.Utility;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;

namespace Content.Client.Skills
{
    [GenerateTypedNameReferences]
    public sealed partial class SkillsMenuWindow : DefaultWindow
    {
        [Dependency] private readonly IResourceCache _resourceCache = default!;

        public SkillsMenuBoundUserInterface BoundSkillMenu;

        private List<PerkHolder>? stored_perks;

        private List<SkillHolder>? stored_skills;
        public SkillsMenuWindow(SkillsMenuBoundUserInterface skillMenu)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            BoundSkillMenu = skillMenu;
        }

        public void Populate_PerkTab(List<PerkHolder> receiving_perks)
        {
            stored_perks = receiving_perks;
            //var longestEntry = "";
            foreach (PerkHolder perk in stored_perks)
            {
                Texture? icon = perk.Icon.GetTexture(_resourceCache);
                if (icon != null)
                    PerksTab.AddItem($"{perk.Name} [{perk.Description}]", icon);
                else
                    Logger.Error("Missing Icon Texture for {0} path", perk.Icon.TexturePath.ToString());

            }
            SetSize = (300, 300);
            //SetSize = (Math.Clamp((longestEntry.Length + 2) * 12, 250, 300),
            //    Math.Clamp(VendingContents.Count * 50, 150, 350));

        }

        public void Populate_SkillsTab(List<SkillHolder> receiving_skills)
        {
            stored_skills = receiving_skills;
            //var longestEntry = "";
            foreach (SkillHolder skill in stored_skills)
            {
                SkillsTab.AddItem($"{skill.Name} [{skill.Value}]");
            }
            SetSize = (300, 300);

        }
    }
}
